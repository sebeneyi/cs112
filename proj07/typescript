Script started on Mon 01 Apr 2019 09:47:33 PM EDT
ssy3@gold24:~/cs112/proj07$ ls
Debug	  ReversePoem.cpp   Stack.h	     tester.cpp
main.cpp  ReversePoem.h     StackTester.cpp  typescript
poems	  StackException.h  StackTester.h
ssy3@gold24:~/cs112/proj07$ cd poems
ssy3@gold24:~/cs112/proj07/poems$ cat     ls
anorexia.txt  keepTheFaith.txt	  love.txt	     theKiss.txt
cats.txt      lostGeneration.txt  ourGeneration.txt  worstDayEver.txt
ssy3@gold24:~/cs112/proj07/poems$ cat ane orexia.txt
Anorexia
Anonymous

I hate the girl in the mirror
so you'll never hear me say that
I'm good enough
I know in my heart that
the number on the scale defines my worth
and that
being thin will make me happy
I refuse to believe that there is hope
I'm ashamed of my body
No longer can I say
I am worth fighting for.ssy3@gold24:~/cs112/proj07/poems$ cat cats.txt
Cats
Leo J. Smada

I love it when cats rub against me.
I could never say
I hate those purring felines.ssy3@gold24:~/cs112/proj07/poems$ cat kepp  eptheFait       The  Faith.txt
Keep The Faith
Tiffany Cheung

The world is hopeless
It is not evident that
We live for a purpose
The truth is
We come and we go
No need to care, no need to know
They tell us
We have a heart and a soul
But that hardly changes anything, don't forget
Our lifetime is short and not within our control
The power's in believing
We should have faith in ourselves
Well, I don't think so
Most of us are meant to be ordinary
Dreams are just hopes, which never come true
It is foolish to presume that
We can all be in God's glow
The future is not in our hands
I would be lying to you if I said
We can change the world together
You need to know that
We can't make it happen
It's not wise to delude ourselves into the thought that
We are more than who we think we are.ssy3@gold24:~/cs112/proj07/poems$ cat lostGeneration.txt
Lost Generation
Jonathan Reed

I'm a part of a Lost Generation
and I refuse to believe that
I can change the world
I realize this may be a shock but
"Happiness comes from within"
is a lie, and
"Money will make me happy"
So in thirty years I'll tell my children
They are not the most important thing in my life
My employers will know that
I have my priority straight because
Work
Is more important than
Family
I tell you this
Once upon a time
Families stay together
But this will not be true in my era
This is a quick fix society
Experts tell me
Thirty years from now I will be celebrating the 10th anniversary of my divorce
I do not concede that
I will live in a country of my own making
In the future
Environmental destruction will be the norm
No longer can it be said that
My peers and I care about this earth
It will be evident that
My generation is apathetic and lethargic
It is foolish to presume that
There is hope
And all of this will come true unless we reverse it.
This was too smart not to share with everyone else.ssy3@gold24:~/cs112/proj07/poems$ cat love.txt
Love?
Anonymous

I don't love you anymore...
I would be lying if I said
That I still love you the way I always did.
I'm sure
Nothing was in vain.
And I feel inside of me that
You mean nothing to me
I could never really say that
Our time together matters.
I feel more and more that
I'm forgetting you...
And I will never use the phrase
I love you.
I'm sorry but I must tell the truth.ssy3@gold24:~/cs112/proj07/poems$ cat ourGeneration.txt
Our Generation
Jordan Nichols
 
Our generation will be known for nothing.
Never will anybody say,
We were the peak of mankind.
That is wrong, the truth is
Our generation was a failure.
Thinking that
We actually succeeded
Is a waste. And we know
Living only for money and power
Is the way to go.
Being loving, respectful, and kind
Is a dumb thing to do.
Forgetting about that time,
Will not be easy, but we will try.
Changing our world for the better
Is something we never did.
Giving up
Was how we handled our problems.
Working hard
Was a joke.
We knew that
People thought we couldn't come back
That might be true,
Unless we turn things aroundssy3@gold24:~/cs112/proj07/poems$ cat theKiss.txt
The Kiss
R. Lamoureux

When you kissed me
A fool fell in love
I became weak in the knees
The world revolved around your halo
Angel eyes captured my imagination
Like Einstein I discovered relativity 
Wisdom had been my lonely pathway
Drunk on independent thought
Wondering if those lips would part for me
Wanting to breathe your breath
Gazing longingly 
I looked towards you
So quickly
You looked away 
my heart sank
When you kissed another boyssy3@gold24:~/cs112/proj07/poems$ cat worstDayEver.txt
Worst Day Ever?
Chanie Gorkin

Today was the absolute worst day ever
And don't try to convince me that
There's something good in every day
Because, when you take a closer look
This world is a pretty evil place
Even if
Some goodness does shine through once in a while
Satisfaction and happiness don't last
And it's not true that
It's all in the mind and heart
Because
True happiness can be obtained
Only if one's surroundings are good
It's not true that good exists
I'm sure you can agree that
The reality
Creates
My attitude
It's all beyond my control
And you'll never in a million years hear me say that
Today was a good dayssy3@gold24:~/cs112/proj07/poems$ cd ..
ssy3@gold24:~/cs112/proj07$ ls
Debug	  ReversePoem.cpp   Stack.h	     tester.cpp
main.cpp  ReversePoem.h     StackTester.cpp  typescript
poems	  StackException.h  StackTester.h
ssy3@gold24:~/cs112/proj07$ cat M main.cpp
 /*
  * main.cpp
  * Date: April 1, 2019
  * Student: Sebene Yi for CS 112 at Calvin College (proj07)
  */

#include "ReversePoem.h"
#include "StackTester.h"
#include <iostream>
using namespace std;

int main() {
	StackTester st;
	st.runTests();
	cout << "\nEnter the name of the poem file: ";
	string poemFile;
	cin >> poemFile;
	ReversePoem reversePoem(poemFile);
	cout << reversePoem.getTitle() << "\n"
		 << reversePoem.getAuthor() << "\n"
		 << "\n*** Top-To-Bottom ***\n\n"
		 << reversePoem.getBody()
		 << "\n\n*** Bottom-To-Top ***\n\n"
		 << reversePoem.getBodyReversed()
		 << endl;
}
ssy3@gold24:~/cs112/proj07$ cat Reversep Poem.cpp
/*
 * ReversePoem.cpp defines the methods of the Reverse Poem Class
 * Date: April 1, 2019
 * Student: Sebene Yi for CS 112 at Calvin College (proj07)
 */

#include "ReversePoem.h"
#include "Stack.h"
#include <fstream>
#include <iostream>
#include <cassert>
using namespace std;

/*
 * constructor that takes a string filename
 * @param: string filename
 * precondition: the file must have a reverse poem
 */
ReversePoem::ReversePoem(string filename) {
	ifstream fin(filename.c_str());
	assert ( fin.is_open() );
	getline(fin, myTitle);
	getline(fin, myAuthor);

	Stack<string> Poem(1);
	string currentline;
	getline(fin, currentline);
	while (!fin.eof() ) {
		getline(fin, currentline);
		try {
			Poem.push(currentline);
		} catch (const StackException& se) {
			Poem.setCapacity(Poem.getCapacity() * 2);
			Poem.push(currentline);
			}
		myBody += currentline + '\n';
	}
	unsigned size = Poem.getSize();
	for (unsigned i=0; i<size; ++i) {
		string reverseline = Poem.pop();
		myBodyReversed += reverseline + '\n';
	}
}
ssy3@gold24:~/cs112/proj07$ cat ReversePoem.h
/*
 * ReversePoem.h declares the methods of Reverse Poem Class
 * Date: April 1, 2019
 * Student: Sebene Yi for CS 112 at Calvin College (proj07)
 */

#ifndef REVERSEPOEM_H_
#define REVERSEPOEM_H_

#include <string>
using namespace std;

class ReversePoem {
public:
	ReversePoem(string filename);
	string getTitle() {return myTitle; }
	string getAuthor() {return myAuthor; }
	string getBody() {return myBody; }
	string getBodyReversed() {return myBodyReversed; }

private:
	string myTitle;
	string myAuthor;
	string myBody;
	string myBodyReversed;
};

#endif /* REVERSEPOEM_H_ */
ssy3@gold24:~/cs112/proj07$ cat Stack.h
/* Stack.h provides a (dynamic-array-based) Stack class.
 * Joel Adams, for CS 112 at Calvin College.
 * Date: March 28, 2019
 * Student: Sebene Yi for CS 112 at Calvin College (proj07)
 * 
 * Invariant: mySize == 0 && isEmpty() && !isFull()
 *         || mySize == myCapacity && !isEmpty() && isFull()
 *         || mySize > 0 && mySize < myCapacity && !isEmpty() && !isFull().
 * Notes: 
 * 1. Member mySize always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or peekTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef STACK_H_
#define STACK_H_

#include "StackException.h"
#include <string>
#include <iostream>
using namespace std;

template<class Item>

class Stack {
public:
	Stack(unsigned capacity);
	Stack(const Stack& original);
	~Stack();
	Stack& operator=(const Stack& original);
	bool isEmpty() const;
	bool isFull() const;
	Item peekTop() const;
	void push(const Item& it);
	Item pop();
	
	unsigned getSize();							//proj07
	unsigned getCapacity();						//proj07
	void setCapacity(unsigned newCapacity);		//proj07

protected:
	void makeCopyOf(const Stack& original);
	
private:
	unsigned myCapacity;
	unsigned mySize;
	Item*    myArray;
	friend class StackTester;
};

/* explicit-value constructor
 * Parameter: capacity, an unsigned value.
 * Precondition: capacity > 0.
 * Postcondition: mySize == 0 && myCapacity == capacity
 *              && myArray contains the address of a dynamic array of 'capacity' entries.
 */
template<class Item>
Stack<Item>::Stack(unsigned capacity) {
	if (capacity == 0) {
	       throw StackException("Stack(capacity)", "capacity must be positive!");
	}
   mySize = 0;
   myCapacity = capacity;
   myArray = new Item[capacity];
}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template<class Item>
Stack<Item>::Stack(const Stack<Item>& original) {
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Precondition: original.myCapacity > 0.
 * Postcondition: I am a copy of original.
 */
template<class Item>
void Stack<Item>::makeCopyOf(const Stack<Item>& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	mySize = original.mySize;
}

/* destructor
 * Postcondition: myCapacity == 0 && mySize == 0
 *             && myArray has been deallocated.
 */
template<class Item>
Stack<Item>::~Stack() {
	delete [] myArray;
	myArray = NULL;
	myCapacity = 0;
	mySize = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
template<class Item>
Stack<Item>& Stack<Item>::operator=(const Stack<Item>& original) {
	if (this != &original) {
		delete [] myArray;
		makeCopyOf(original);
	}
	return *this;
}

/*
 * checks to see if the stack is empty
 *@param:
 *return: bool
 *Postcondition:
 */
template<class Item>
bool Stack<Item>::isEmpty() const {
	return mySize == 0;
}

/*
 * checks to see if the stack is full
 * @param:
 * return: bool
 * Postcondition:
 */
template<class Item>
bool Stack<Item>::isFull() const {
	return mySize == myCapacity;
}
template<class Item>
Item Stack<Item>::peekTop() const {
    if ( isEmpty() ) {
       throw StackException("peekTop()", "stack is empty!");
    }
	return myArray[mySize-1];
}

/*
 * pushes a item into the array
 * @param:const Item& it
 * return:
 * Postcondition:
 */
template<class Item>
void Stack<Item>::push(const Item& it) {
	if ( isFull() ) {
		throw StackException("push()", "stack is full!");
	}
	myArray[mySize] = it;
	mySize++;
}

/*
 * pops the first item in the array
 * and returns it
 * @param:
 * return: Item
 * Postcondition:
 */
template<class Item>
Item Stack<Item>::pop() {
	if ( isEmpty() ) {
		throw StackException("pop()", "stack is empty!");
	}
	mySize--;
	return myArray[mySize];
}

/*
 * getter that gets the size
 * @param:
 * return: mySize
 * Postcondition:
 */
template<class Item>
unsigned Stack<Item>::getSize() {
	return mySize;
}

/*
 * getter that gets the capacity
 * @param:
 * return: myCapacity
 * Postcondition:
 */
template<class Item>
unsigned Stack<Item>::getCapacity() {
	return myCapacity;
}

/*
 * sets a new capacity to a stack
 * @param: unsigned newCapacity
 * return:
 * Postcondition:
 */
template<class Item>
void Stack<Item>::setCapacity(unsigned newCapacity) {
	if (newCapacity != myCapacity) {
		if (newCapacity == 0 or newCapacity < getSize()){
			throw StackException("setCapacity()", "The new capacity is too small. Will lose items!");
		}
		else {
			Item* newArray = new Item[newCapacity];
			for (unsigned i=0; i<mySize; i++) {
				newArray[i] = myArray[i];
			}
			delete [] myArray;
			myArray = newArray;
			myCapacity = newCapacity;
		}
	}
}

#endif

ssy3@gold24:~/cs112/proj07$ cat StackException.h
/* StackException.h models exceptions in stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Date: March 28, 2019
 * Student: Sebene Yi for CS 112 at Calvin College (proj07)
 */

#ifndef STACK_EXCEPTION
#define STACK_EXCEPTION

#include <iostream>
using namespace std;

 
class StackException {
public:
   StackException(const string& whereThrown,
                  const string& message) { 
       myLocation = whereThrown; 
       myMessage = message; 
   }

   string asString() const {
       return "*** StackException in " +
               myLocation + ": " + myMessage; 
   }

private:
   string myLocation;
   string myMessage;
};  // StackException


/* Function to allow a StackException (or a subclass) to be displayed
 * via an ostream.
 * Parameters: out, an ostream;
 *             se, a StackException.
 * Postcondition: the string representation of se has been inserted
 * into out
 *             && return-value == out.
 */
inline ostream& operator<<(ostream& out, const StackException& se) {
      out << se.asString();
      return out;
}

#endif

ssy3@gold24:~/cs112/proj07$ cat STac   tackTester.cpp
/* StackTester.cpp defines test-methods for the 
 *  dynamically allocated (array) Stack operations
 * Joel Adams, for CS 112 at Calvin College
 * Date: March 28, 2019
 * Student: Sebene Yi for CS 112 at Calvin College (proj07)
 */

#include "StackTester.h"
#include "Stack.h"
#include "ReversePoem.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
using namespace std;

typedef int Item;

void StackTester::runTests() {
	cout << "Testing Stack class..." << endl;
	testConstructor();
	testIsEmpty();
	testPushPeekTopAndIsFull();
	testPop();
	testCopyConstructor();
	testAssignment();
	testDestructor();
	testGetSizeAndGetAndSetCapacity();
	testReversePoem();
	cout << "All tests passed!" << endl;
}

void StackTester::testConstructor() {
	cout << "- Testing constructor... " << flush;
	// invalid parameter
	try {
		Stack<Item> s1(0);
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (const StackException& se) {
		cout << se << flush;
		cout << " 0 " << flush;
	}
	// valid parameter
	Stack<Item> s2(3);
	cout << " 1 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testIsEmpty() {
	cout << "- Testing isEmpty()... " << flush;
	// capacity 1
	Stack<Item> s1(1);
	assert( s1.isEmpty() );
	cout << " 1 " << flush;
	// capacity > 1
	Stack<Item> s2(3);
	assert( s2.isEmpty() );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}


void StackTester::testPushPeekTopAndIsFull() {
	cout << "- Testing push()... " << flush;
	// test with capacity 1
	Stack<Item> s1(1);
	s1.push(11);
	assert( s1.peekTop() == 11 );
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	try {
		s1.push(22);
		cerr << "\npush() worked on a full stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1 " << flush;
	}
	// test with capacity > 1
	Stack<Item> s2(3);
	s2.push(11);
	assert( s2.peekTop() == 11 );
	s2.push(22);
	assert( s2.peekTop() == 22 );
	s2.push(33);
	assert( s2.peekTop() == 33 );
	try {
		s2.push(44);
		cerr << "\npush() worked on a full stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2 " << flush;
	}
	cout << " Passed! " << endl;
}

void StackTester::testPop() {
	cout << "- Testing pop()... " << flush;
	// try empty, capacity 1
	Stack<Item> s1(1);
	assert( s1.isEmpty() );
    try {
            s1.peekTop();
            cerr << "\npeekTop() worked on empty stack (size 1)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 0a " << flush;
    }
	try {
		s1.pop();
		cerr << "\npop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 0b " << flush;
	}

	// try empty, capacity > 1
	Stack<Item> s2(3);
	try {
		s2.pop();
		cerr << "\npop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1a " << flush;
	}
    try {
            s2.peekTop();
            cerr << "\npeekTop() worked on empty stack (size 3)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 1b " << flush;
    }

	// try non-empty, capacity 1
	Stack<Item> s3(1);
	s3.push(11);
	assert( s3.peekTop() == 11 );
	assert( s3.pop() == 11 );
	cout << " 2 " << flush;
	try {
		s3.pop();
		cerr << "\ns3.pop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2a " << flush;
	}
    try {
            s3.peekTop();
            cerr << "\ns3.peekTop() worked on empty stack (size 1)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 2b " << flush;
    }

	// try non-empty, capacity > 1
	Stack<Item> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	assert( s4.peekTop() == 33 );
	assert( s4.pop() == 33 );
	assert( s4.peekTop() == 22 );
	assert( s4.pop() == 22 );
	assert( s4.peekTop() == 11 );
	assert( s4.pop() == 11 );
	cout << " 3 " << flush;
	try {
		s4.pop();
		cerr << "\ns4.pop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 3a " << flush;
	}
    try {
            s4.peekTop();
            cerr << "\ns4.peekTop() worked on empty stack (size 3)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 3b " << flush;
    }

	cout << " Passed!" << endl;
}

void StackTester::testCopyConstructor() {
	cout << "- Testing copy constructor... " << flush;
	// minimal empty Stack
	Stack<Item> s1(1);
	Stack<Item> s2(s1);
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myCapacity == 1 );
	assert( s2.myArray != s1.myArray );
	cout << " 1 " << flush;
	// minimal non-empty Stack
	Stack<Item> s3(1);
	s3.push(11);
	Stack<Item> s4(s3);
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// non-minimal, non-empty stack
	Stack<Item> s5(3);
	s5.push(11);
	s5.push(22);
	s5.push(33);
	Stack<Item> s6(s5);
	assert( s6.myCapacity == s5.myCapacity );
	assert( s6.mySize == s5.mySize );
	assert( s6.myArray != s5.myArray );
	assert( s6.pop() == 33 );
	assert( s6.pop() == 22 );
	assert( s6.pop() == 11 );
	assert( s5.peekTop() == 33 );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testAssignment() {
	cout << "- Testing assignment... " << flush;
	// minimal empty Stacks, same size
	Stack<Item> s1(1);
	Stack<Item> s2(1);
	s2 = s1;
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myArray != s1.myArray );
	assert( s2.myCapacity == 1 );
	cout << " 1 " << flush;
	// minimal non-empty Stack to empty Stack, same capacity
	Stack<Item> s3(1);
	s3.push(11);
	Stack<Item> s4(1);
	s4 = s3;
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// minimal empty stack to non-empty stack, same capacity
	Stack<Item> s5(1);
	Stack<Item> s6(1);
	s6.push(11);
	s6 = s5;
	assert( s6.isEmpty() );
	assert( s6.myArray != NULL );
	assert( s6.myArray != s5.myArray );
	assert( s6.myCapacity == 1 );
	cout << " 3 " << flush;
	// non-minimal non-empty stack to empty stack, different capacities
	Stack<Item> s7(3);
	s7.push(11);
	s7.push(22);
	s7.push(33);
	Stack<Item> s8(2);
	s8 = s7;
	assert( s8.myArray != s7.myArray );
	assert( s8.myCapacity == s7.myCapacity );
	assert( s8.mySize == s7.mySize );
	assert( s8.pop() == 33 );
	assert( s8.pop() == 22 );
	assert( s8.pop() == 11 );
	assert( s7.peekTop() == 33 );
	cout << " 4 " << flush;
	// non-minimal, empty stack to non-empty stack, different capacities
	Stack<Item> s9(2);
	Stack<Item> s10(3);
	s10.push(11);
	s10.push(22);
	s10.push(33);
	s10 = s9;
	assert( s10.isEmpty() );
	assert( s10.myArray != s9.myArray );
	assert( s10.myCapacity == s10.myCapacity );
	cout << " 5 " << flush;
	// self-assignment, minimal size
	Stack<Item> s11(1);
	s11.push(11);
	s11 = s11;
	assert( s11.isFull() );
	assert( !s11.isEmpty() );
	cout << " 6 " << flush;
	// chaining
	Stack<Item> s12(2);
	s12.push(11);
	s12.push(22);
	Stack<Item> s13(1);
	Stack<Item> s14(1);
	s14 = s13 = s12;
	assert( s14.isFull() );
	assert( s14.myArray != s13.myArray );
	assert( s14.myArray != s12.myArray );
	assert( s14.pop() == 22 );
	assert( s14.pop() == 11 );
	assert( s14.isEmpty() );
	cout << " 7 " << flush;
      // self-assignment, non-minimal size
      s13 = s13;
	assert( !s13.isEmpty() );
	assert( s13.isFull() );
	assert( s13.pop() == 22 );
	assert( s13.pop() == 11 );
	assert( s13.isEmpty() );
	cout << " 8 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testDestructor() {
	cout << "- Testing destructor..." << flush;
	// minimal, empty
	Stack<Item> s1(1);
	s1.~Stack();
	assert( s1.isEmpty() );
	assert( s1.myArray == NULL );
	assert( s1.myCapacity == 0 );
	cout << " 1 " << flush;
	// minimal, non-empty
	Stack<Item> s2(1);
	s2.push(11);
	s2.~Stack();
	assert( s2.isEmpty() );
	assert( s2.myArray == NULL );
	assert( s2.myCapacity == 0 );
	cout << " 2 " << flush;
	// non-minimal, empty
	Stack<Item> s3(3);
	s3.~Stack();
	assert( s3.isEmpty() );
	assert( s3.myArray == NULL );
	assert( s3.myCapacity == 0 );
	cout << " 3 " << flush;
	// non-minimal, non-empty
	Stack<Item> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	s4.~Stack();
	assert( s4.isEmpty() );
	assert( s4.myArray == NULL );
	assert( s4.myCapacity == 0 );
	cout << " 4 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testGetSizeAndGetAndSetCapacity() {
	cout << "- Testing getSize(), getCapacity(), and setCapacity()..." << flush;
	//testing getCapacity on invalid parameter
	try {
		Stack<Item> s0(0);
		s0.getCapacity();
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 0a " << flush;
	}

	//testing setCapacity on invalid parameter
	try {
		Stack<Item> s1(3);
		s1.setCapacity(0);
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 0b " << flush;
	}

	//testing capacity on capacity < getSize
	Stack<Item> s3(5);
	s3.push(1);
	s3.push(2);
	try {
		s3.setCapacity(1);
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1 " << flush;
	}

	//minimal case
	Stack<Item> s2(1);
	assert (s2.getSize() == 0);
	assert (s2.getCapacity() == 1);
	cout << " 2 " << flush;


	//non empty case
	Stack<Item> s4(5);
	assert ( s4.getSize() == 0);
	assert ( s4.getCapacity() == 5);
	cout << " 3a " << flush;

	//testing size
	s4.push(3);
	assert ( s4.getSize() == 1 );
	assert ( s4.getCapacity() == 5);
	cout << " 3b " << flush;

	//testing size and set capacity
	s4.push(4);
	s4.push(5);
	s4.push(6);
	s4.setCapacity(7);
	assert( s4.getSize() == 4 );
	assert( s4.getCapacity() == 7);
	cout << " 4a " << flush;

	//testing size and set capacity 2
	s4.pop();
	s4.pop();
	s4.setCapacity(3);
	assert( s4.getSize() == 2);
	assert( s4.getCapacity() == 3);
	cout << " 4b " << flush;

	cout << " Passed!" << endl;

}

void StackTester::testReversePoem() {
	cout << "- Testing ReversePoem..." << flush;
	//testing get author and title
	ReversePoem p1("poems/cats.txt");
	assert (p1.getTitle() == "Cats");
	assert (p1.getAuthor() == "Leo J. Smada");
	cout << " 1 " << flush;

	//testing getBody() and getBodyReversed()
	assert (p1.getBody() == "I love it when cats rub against me.\nI could never say\nI hate those purring felines.\n");
	assert (p1.getBodyReversed() == "I hate those purring felines.\nI could never say\nI love it when cats rub against me.\n");
	cout << " 2 " << flush;

	//testing case 2
	ReversePoem p2("poems/love.txt");
	assert (p2.getTitle() == "Love?");
	assert (p2.getAuthor() == "Anonymous");
	cout << " 3 " << flush;

	//testing getBody() and getBodyReversed() on case 2
	assert (p2.getBody() == "I don't love you anymore...\nI would be lying if I said\nThat I still love you the way I always did.\nI'm sure\nNothing was in vain.\nAnd I feel inside of me that\nYou mean nothing to me\nI could never really say that\nOur time together matters.\nI feel more and more that\nI'm forgetting you...\nAnd I will never use the phrase\nI love you.\nI'm sorry but I must tell the truth.\n");
	assert (p2.getBodyReversed() == "I'm sorry but I must tell the truth.\nI love you.\nAnd I will never use the phrase\nI'm forgetting you...\nI feel more and more that\nOur time together matters.\nI could never really say that\nYou mean nothing to me\nAnd I feel inside of me that\nNothing was in vain.\nI'm sure\nThat I still love you the way I always did.\nI would be lying if I said\nI don't love you anymore...\n");
	cout << " 4 " << flush;

	cout << " Passed! " << endl;
}
ssy3@gold24:~/cs112/proj07$ cat StackTester.h
/* StackTester.h declares a test-class for a dynamically allocated (array) Stack.
 * Joel Adams, for CS 112 at Calvin College
 * Date: March 28, 2019
 * Student: Sebene Yi for CS 112 at Calvin College (proj07)
 */

#ifndef STACKTESTER_H_
#define STACKTESTER_H_


class StackTester {
public:
	void runTests();
	void testConstructor();
	void testIsEmpty();
	void testPushPeekTopAndIsFull();
	void testPop();
	void testCopyConstructor();
	void testAssignment();
	void testDestructor();

	void testGetSizeAndGetAndSetCapacity();
	void testReversePoem();
};

#endif /*STACKTESTER_H_*/

ssy3@gold24:~/cs112/proj07$ cat tester.h
cat: tester.h: No such file or directory
ssy3@gold24:~/cs112/proj07$ catt  tester.cpp
/* tester.cpp is a "driver" to run the tests in the StackTester class.
 * Joel Adams, for CS 112 at Calvin College.
 * Date: March 28, 2019
 * Student: Sebene Yi for CS 112 at Calvin College (proj07)
 */
 
// commented out to run Reverse Poem
//#include "StackTester.h"
//
//int main() {
//	StackTester st;
//	st.runTests();
//}

ssy3@gold24:~/cs112/proj07$ cd Debug
ssy3@gold24:~/cs112/proj07/Debug$ ls
main.d	  objects.mk	 ReversePoem.o	StackTester.o  tester.o
main.o	  proj07	 sources.mk	subdir.mk
makefile  ReversePoem.d  StackTester.d	tester.d
ssy3@gold24:~/cs112/proj07/Debug$ make all
make: Nothing to be done for 'all'.
ssy3@gold24:~/cs112/proj07/Debug$ cd ..
ssy3@gold24:~/cs112/proj07$ ./Debug/proj07
Testing Stack class...
- Testing constructor... *** StackException in Stack(capacity): capacity must be positive! 0  1  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing getSize(), getCapacity(), and setCapacity()... 0a  0b  1  2  3a  3b  4a  4b  Passed!
- Testing ReversePoem... 1  2  3  4  Passed! 
All tests passed!

Enter the name of the poem file: peo  oems. /cats.txt
Cats
Leo J. Smada

*** Top-To-Bottom ***

I love it when cats rub against me.
I could never say
I hate those purring felines.


*** Bottom-To-Top ***

I hate those purring felines.
I could never say
I love it when cats rub against me.

ssy3@gold24:~/cs112/proj07$ ./Debug/proj07
Testing Stack class...
- Testing constructor... *** StackException in Stack(capacity): capacity must be positive! 0  1  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing getSize(), getCapacity(), and setCapacity()... 0a  0b  1  2  3a  3b  4a  4b  Passed!
- Testing ReversePoem... 1  2  3  4  Passed! 
All tests passed!

Enter the name of the poem file: peo  oems/love.txt
Love?
Anonymous

*** Top-To-Bottom ***

I don't love you anymore...
I would be lying if I said
That I still love you the way I always did.
I'm sure
Nothing was in vain.
And I feel inside of me that
You mean nothing to me
I could never really say that
Our time together matters.
I feel more and more that
I'm forgetting you...
And I will never use the phrase
I love you.
I'm sorry but I must tell the truth.


*** Bottom-To-Top ***

I'm sorry but I must tell the truth.
I love you.
And I will never use the phrase
I'm forgetting you...
I feel more and more that
Our time together matters.
I could never really say that
You mean nothing to me
And I feel inside of me that
Nothing was in vain.
I'm sure
That I still love you the way I always did.
I would be lying if I said
I don't love you anymore...

ssy3@gold24:~/cs112/proj07$ exit

Script done on Mon 01 Apr 2019 09:50:02 PM EDT
